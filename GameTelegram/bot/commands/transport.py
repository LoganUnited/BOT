from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from game.core import game
from game.transport import TransportManager
from utils.logger import setup_logger

logger = setup_logger()

async def transport_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
    try:
        player = game.get_player(update.effective_user.id)
        if not player:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        keyboard = []
        
        # –¢–µ–∫—É—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        current_transport = TransportManager.get_transport(player.transport)
        msg = f"üöó –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {current_transport.name}\n\n"
        msg += "–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n"
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        for transport_name in player.owned_transports:
            transport = TransportManager.get_transport(transport_name)
            is_active = "‚úÖ " if transport_name == player.transport else ""
            keyboard.append([
                InlineKeyboardButton(
                    f"{is_active}{transport.name}",
                    callback_data=f"select_transport_{transport_name}"
                )
            ])
            msg += f"- {transport.name} ({transport.speed} –∫–º/—á)\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        keyboard.append([
            InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="buy_transport")
        ])
        
        msg += f"\n‚õΩ –¢–æ–ø–ª–∏–≤–æ: {player.fuel:.1f}%"
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ transport_command: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def select_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        transport_name = query.data.split('_')[2]
        player = game.get_player(query.from_user.id)
        
        if transport_name in player.owned_transports:
            player.transport = transport_name
            game.db.set_current_transport(player.user_id, transport_name)
            await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {transport_name}")
        else:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def buy_transport_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        player = game.get_player(query.from_user.id)
        keyboard = []
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        for name, transport in TransportManager.TRANSPORTS.items():
            if name not in player.owned_transports:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{transport.name} - ${transport.price}",
                        callback_data=f"buy_{name}"
                    )
                ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_transport")
        ])
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_transport_menu: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def buy_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫—É–ø–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        transport_name = query.data.split('_')[1]
        player = game.get_player(query.from_user.id)
        transport = TransportManager.get_transport(transport_name)
        
        if not transport:
            await query.edit_message_text("‚ùå –¢–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        if transport_name in player.owned_transports:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç!")
            return
        
        if player.money < transport.price:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            return
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        player.money -= transport.price
        player.owned_transports.append(transport_name)
        game.db.buy_transport(player.user_id, transport_name, transport.price)
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞
        response = (
            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {transport.name} –∑–∞ ${transport.price}!\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: ${player.money:.2f}"
        )
        await query.edit_message_text(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.")

def get_transport_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    return [
        CommandHandler("transport", transport_command),
        CallbackQueryHandler(select_transport, pattern="^select_transport_"),
        CallbackQueryHandler(buy_transport_menu, pattern="^buy_transport$"),
        CallbackQueryHandler(buy_transport, pattern="^buy_"),
        CallbackQueryHandler(transport_command, pattern="^back_to_transport$")
    ]