import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from game.core import game
from game.combat import combat_system
from utils.decorators import update_activity

@update_activity
async def start_combat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    player = game.db.get_player(user.id)
    
    if not player:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    location = player[5]
    combat_data = combat_system.start_combat(location)
    context.user_data["combat"] = combat_data
    
    keyboard = [
        [InlineKeyboardButton("‚öî –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
        [InlineKeyboardButton("üèÉ –ë–µ–∂–∞—Ç—å", callback_data="flee")]
    ]
    
    await update.message.reply_text(
        f"‚öîÔ∏è –ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª {combat_data['enemy']} (‚ù§Ô∏è {combat_data['hp']}/{combat_data['max_hp']})!",
        reply_markup=InlineKeyboardMarkup(keyboard))

@update_activity
async def combat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    action = query.data
    
    combat_data = context.user_data.get("combat")
    if not combat_data:
        await query.edit_message_text("‚ùå –ë–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return
    
    player_data = game.db.get_player(user.id)
    if not player_data:
        await query.edit_message_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if action == "attack":
        player_damage = player_data[2] * 5
        result = combat_system.player_attack(player_damage, combat_data)
        
        message = f"‚öîÔ∏è –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {result['damage']} —É—Ä–æ–Ω–∞!"
        if result["is_critical"]:
            message += " –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!"
        
        if result["enemy_defeated"]:
            message += f"\nüéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ {combat_data['enemy']}!"
            reward = random.randint(10, 30)
            game.update_money(user.id, reward)
            message += f"\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ {reward} –º–æ–Ω–µ—Ç!"
            await query.edit_message_text(message)
            del context.user_data["combat"]
            return
        
        combat_data["hp"] = result["hp"]
        context.user_data["combat"] = combat_data
        message += f"\n‚ù§Ô∏è {combat_data['enemy']}: {combat_data['hp']}/{combat_data['max_hp']}"
        
        keyboard = [
            [InlineKeyboardButton("‚öî –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
            [InlineKeyboardButton("üèÉ –ë–µ–∂–∞—Ç—å", callback_data="flee")]
        ]
        
        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif action == "flee":
        success = random.random() > 0.3
        if success:
            await query.edit_message_text("üèÉ‚Äç‚ôÇÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏!")
        else:
            damage = random.randint(5, 15)
            new_hp = max(0, player_data[3] - damage)
            game.update_hp(user.id, new_hp)
            await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {damage} —É—Ä–æ–Ω–∞.\n‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {new_hp}/100")
        del context.user_data["combat"]

# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def get_combat_handlers():
    return [
        CommandHandler("fight", start_combat),
        CallbackQueryHandler(combat_callback, pattern="^(attack|flee)$")
    ]

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
combat_handlers = get_combat_handlers()