import asyncio
from datetime import datetime
from utils.logger import setup_logger
from database.manager import DatabaseManager
from config import Config
from telegram import Bot
from telegram.error import TelegramError

logger = setup_logger()
db = DatabaseManager()

class TaskManager:
    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.is_running = False

    async def auto_afk_and_income_task(self, context):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AFK —Å—Ç–∞—Ç—É—Å–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
        if self.is_running:
            logger.warning("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return

        self.is_running = True
        logger.info("–ó–∞–¥–∞—á–∞ auto_afk_and_income_task –∑–∞–ø—É—â–µ–Ω–∞")

        try:
            while self.is_running:
                try:
                    await self._process_players()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤: {str(e)}")
                finally:
                    await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ 1 —á–∞—Å –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        except asyncio.CancelledError:
            logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        finally:
            self.is_running = False

    async def _process_players(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–æ–≤"""
        with db.conn.cursor() as cursor:
            cursor.execute("""
                SELECT user_id, level, last_active, is_afk 
                FROM players
                WHERE last_active IS NOT NULL
            """)
            players = cursor.fetchall()
            
            now = datetime.now()
            processed = 0
            afk_count = 0
            income_count = 0

            for user_id, level, last_active_str, is_afk in players:
                try:
                    processed += 1
                    last_active = datetime.strptime(last_active_str, "%Y-%m-%d %H:%M:%S")
                    hours_inactive = (now - last_active).total_seconds() / 3600

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ AFK —Å—Ç–∞—Ç—É—Å–∞
                    if hours_inactive >= 24:
                        if not is_afk:
                            await self._handle_afk(user_id)
                            afk_count += 1
                        continue

                    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
                    if not is_afk:
                        await self._handle_income(user_id, level)
                        income_count += 1

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ {user_id}: {str(e)}")

            db.conn.commit()
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {processed}, "
                f"–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ AFK: {afk_count}, "
                f"–Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ—Ö–æ–¥–æ–≤: {income_count}"
            )

    async def _handle_afk(self, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ AFK"""
        db.set_afk_status(user_id, True)
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text="üî¥ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º AFK –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /back —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ AFK")
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å AFK-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {str(e)}")

    async def _handle_income(self, user_id, level):
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫—É"""
        income = level * 10
        db.update_money(user_id, income)
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üîÑ –ê–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: +{income} –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            )
            logger.debug(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {income} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ {user_id}: {str(e)}")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.is_running = False
        try:
            await self.bot.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {str(e)}")